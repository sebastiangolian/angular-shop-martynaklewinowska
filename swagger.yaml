openapi: 3.0.0
info:
  title: Sklep MK
  description: Sklep MK
  version: 1.0.18
servers:
  - url: http://api.mk.pl/v1
components:
  schemas:
    ApiMessage:
      type: "object"
      properties:
        errors:
          type: "array"
          items:
            $ref: "#/components/schemas/ApiError"
        notifications:
          type: "array"
          items:
            $ref: "#/components/schemas/ApiNotification"
    ApiError:
      type: "object"
      properties:
        code:
          type: "string"
        message:
          type: "string"
    ApiNotification:
      type: "object"
      properties:
        message:
          type: "string"
    Banner:
      type: "object"
      required:
      - "idBanner"
      - "name"
      - "imgUrl"
      - "backgroundColor"
      properties:
        idBanner:
          type: "string"
        name:
          type: "string"
          enum: 
            - "top-banner"
        imgUrl:
          type: "string"
        url:
          type: "string"
        backgroundColor:
          type: "string"
    BasketItem:
      type: "object"
      required:
      - "amount"
      - "price"
      - "photo"
      - "product"
      - "event"
      properties:
        amount:
          type: "number"
        price:
          type: "number"
        photo:
          $ref: "#/components/schemas/Photo"
        product:
          $ref: "#/components/schemas/Product"
        event:
          $ref: "#/components/schemas/Event"
    Event:
      type: "object"
      required:
      - "idEvent"
      - "name"
      - "titlePhotoUrl"
      - "description"
      properties:
        idEvent:
          type: "string"
        name:
          type: "string"
        titlePhotoUrl:
          type: "string"
        description:
          type: "string"
    Log:
      type: "object"
      properties:
        timestamp:
          type: "number"
        type: 
          type: "string"
        content:
          type: "string"
    Offer:
      type: "object"
      required:
      - "idOffer"
      - "name"
      properties:
        idOffer:
          type: "string"
        name:
          type: "string"
        products:
          type: "array"
          items:
            $ref: "#/components/schemas/Product"
    Order:
      type: "object"
      required:
      - "firstname"
      - "lastname"
      - "email"
      - "agreements"
      - "items"
      properties:
        idOrder:
          type: "string"
        orderNumber:
          type: "string"
        orderDate:
          type: "string"
          format: "date-time"
        status:
          type: "string"
        isPaid:
          type: "boolean"
        firstname:
          type: "string"
        lastname:
          type: "string"
        phone:
          type: "string"
        email:
          type: "string"
        comment:
          type: "string"
        agreements:
          type: "array"
          items:
            $ref: "#/components/schemas/OrderAgreement"
        paymentMethod:
          $ref: "#/components/schemas/OrderPaymentMethod"
        deliveryMethod:
          $ref: "#/components/schemas/OrderDeliveryMethod"
        payment:
          $ref: '#/components/schemas/OrderPayment'
        items:
          type: "array"
          items:
            $ref: "#/components/schemas/BasketItem" 
    OrderAgreement:
      type: "object"
      required:
      - "idOrderAgreement"
      - "content"
      - "checked"
      - "required"
      properties:
        idOrderAgreement:
          type: "string"
        content:
          type: "string"
        checked:
          type: "boolean"
        required:
          type: "boolean"
    OrderDefinition:
      type: "object"
      required:
      - "labels"
      - "agreements"
      properties:
        firstname:
          type: "string"
        lastname:
          type: "string"
        phone:
          type: "string"
        email:
          type: "string"
        emailConfirm:
          type: "string"
        comment:
          type: "string"
        labels:
          $ref: "#/components/schemas/OrderLabel"
        agreements:
          type: "array"
          items:
            $ref: "#/components/schemas/OrderAgreement"
        paymentMethods:
          type: "array"
          items:
            $ref: "#/components/schemas/OrderPaymentMethod"
        deliveryMethods:
          type: "array"
          items:
            $ref: "#/components/schemas/OrderDeliveryMethod"
    OrderLabel:
      type: "object"
      properties:
        firstnameLabel:
          type: "string"
        lastnameLabel:
          type: "string"
        phoneLabel:
          type: "string"
        emailLabel:
          type: "string"
        emailConfirmLabel:
          type: "string"
    OrderPaymentMethod:
      type: "object"
      required:
      - "idOrderPaymentMethod"
      properties:
        idOrderPaymentMethod:
          type: "string"
        content:
          type: "string"
    OrderDeliveryMethod:
      type: "object"
      required:
      - "idOrderDeliveryMethod"
      - "content"
      properties:
        idOrderDeliveryMethod:
          type: "string"
        content:
          type: "string"
    OrderPayment:
      type: "object"
      properties:
        idOrderPayment:
          type: "string"
        isProgress:
          type: "boolean"
        canStartNewPayment:
          type: "boolean"
        status:
          type: "string"    
        operatorUrl:
          type: "string"    
    Photo:
      type: "object"
      required:
      - "idPhoto"
      - "idEvent"
      - "name"
      - "width"
      - "height"
      properties:
        idPhoto:
          type: "string"
        idEvent:
          type: "string"
        name:
          type: "string"
        width:
          type: "number"
        height:
          type: "number"
    Product:
      type: "object"
      required:
      - "idProduct"
      - "name"
      - "price"
      properties:
        idProduct:
          type: "string"
        name:
          type: "string"
        price:
          type: "number"
        amount:
          type: "number"
    User:
      type: "object"
      required:
        - "login"
      properties:
        login:
          type: "string"
        password:
          type: "string"
        firstName:
          type: "string"
        lastName:
          type: "string"
        type:
          type: "string"
          enum:
            - "individual"
            - "group"
  responses:
    BadRequest:
      description: "Bad Request"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
    Unauthorized:
      description: "Unauthorized"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
    NotFound:
      description: "Not Found"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
  parameters:
    SortBy:
      name: sort_by
      in: query
      required: true
      schema:
        type: string
    Order:
      name: order
      in: query
      required: true
      schema:
        type: string
    Limit:
      name: limit
      in: query
      required: true
      schema:
        type: string
    Page:
      name: page
      in: query
      required: true
      schema:
        type: string
    Filters:
      name: filters
      in: query
      required: true
      schema:
        type: object
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
paths:
  /banner/list:
    get:
      tags:
        - Banner
      parameters:
        - $ref: '#/components/parameters/Filters'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Order'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/SortBy'
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  items:
                    type: "array"
                    items:
                      $ref: "#/components/schemas/Banner"
                  total:
                    type: "number"
                  messages:
                    $ref: "#/components/schemas/ApiMessage"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /event/{idEvent}:
    get:
      tags:
        - Event
      security:
        - bearerAuth: []
      parameters:
        - name: idEvent
          in: path
          required: true
          schema:
            type: "string"
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  item:
                    $ref: "#/components/schemas/Event"
                  messages:
                    $ref: "#/components/schemas/ApiMessage"
        '400': 
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /event/list:
    get:
      tags:
        - Event
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Filters'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Order'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/SortBy'
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  items:
                    type: "array"
                    items:
                      $ref: "#/components/schemas/Event"
                  total:
                    type: "number"
                  messages:
                    $ref: "#/components/schemas/ApiMessage"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /photo/list:
    get:
      tags:
        - Photo
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Filters'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Order'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/SortBy'
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  items:
                    type: "array"
                    items:
                      $ref: "#/components/schemas/Photo"
                  total:
                    type: "number"
                  messages:
                    $ref: "#/components/schemas/ApiMessage"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /photo/{idPhoto}/image:
    get:
      tags:
        - Photo
      security:
        - bearerAuth: []
      parameters:
        - name: idPhoto
          in: path
          required: true
          schema:
            type: "string"
      responses:
        '200':
          description: "OK"
          content:
            image/jpg:
              schema: 
                type: "string"
                format: "binary"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /offer/list:
    get:
      tags:
        - Offer
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Filters'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Order'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/SortBy'
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  items:
                    type: "array"
                    items:
                      $ref: "#/components/schemas/Offer"
                  total:
                    type: "number"
                  messages:
                    $ref: "#/components/schemas/ApiMessage"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /order-definition:
    get:
      tags:
        - OrderDefinition
      security:
        - bearerAuth: []
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  item:
                    $ref: "#/components/schemas/OrderDefinition"
                  messages:
                    $ref: "#/components/schemas/ApiMessage"
        '400': 
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /log:
    post:
      tags:
        - Log
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Log'
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  item:
                    $ref: "#/components/schemas/Log"
                  messages:
                    $ref: "#/components/schemas/ApiMessage"
        '400': 
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /order:
    post:
      tags:
        - Order
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  item:
                    $ref: "#/components/schemas/Order"
                  messages:
                    $ref: "#/components/schemas/ApiMessage"
        '400': 
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /order/{idOrder}:
    get:
      tags:
        - Order
      security:
        - bearerAuth: []
      parameters:
        - name: idOrder
          in: path
          required: true
          schema:
            type: "string"
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  item:
                    $ref: "#/components/schemas/Order"
                  messages:
                    $ref: "#/components/schemas/ApiMessage"
        '400': 
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /order/list:
    get:
      tags:
        - Order
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Filters'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Order'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/SortBy'
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  items:
                    type: "array"
                    items:
                      $ref: "#/components/schemas/Order"
                  total:
                    type: "number"
                  messages:
                    $ref: "#/components/schemas/ApiMessage"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /order/{idOrder}/payment:
    parameters:
      - name: idOrder
        in: path
        required: true
        schema:
          type: "string"
    post:
      tags:
        - Order
      security:
        - bearerAuth: []
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  item:
                    $ref: "#/components/schemas/OrderPayment"
                  messages:
                    $ref: "#/components/schemas/ApiMessage"
        '400': 
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    get:
      tags:
        - Order
      security:
        - bearerAuth: []
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  item:
                    $ref: '#/components/schemas/OrderPayment'
                  messages:
                    $ref: "#/components/schemas/ApiMessage"
        '400': 
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /user/login:
    post:
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: "OK"
          headers:
            X-Expires-After:
              schema:
                type: "string"
                format: "date-time"
              description: The date after which the token will expire
            Authorization:
              schema: 
                type: "string"
              description: JWT token
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  messages:
                    $ref: "#/components/schemas/ApiMessage"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /user/logout:
    get:
      tags:
        - User
      security:
        - bearerAuth: []
      responses:
        '200':
          description: "OK"
          headers:
            Logout-Success:
              schema:
                type: "string"
                format: "date-time"
              description: The date of logout
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  messages:
                    $ref: "#/components/schemas/ApiMessage"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /user:
    get:
      tags:
        - User
      security:
        - bearerAuth: []
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  item:
                    $ref: "#/components/schemas/User"
                  messages:
                    $ref: "#/components/schemas/ApiMessage"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
